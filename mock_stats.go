// Code generated by MockGen. DO NOT EDIT.
// Source: stats.go

// Package stats is a generated GoMock package.
package stats

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStats is a mock of Stats interface.
type MockStats struct {
	ctrl     *gomock.Controller
	recorder *MockStatsMockRecorder
}

// MockStatsMockRecorder is the mock recorder for MockStats.
type MockStatsMockRecorder struct {
	mock *MockStats
}

// NewMockStats creates a new mock instance.
func NewMockStats(ctrl *gomock.Controller) *MockStats {
	mock := &MockStats{ctrl: ctrl}
	mock.recorder = &MockStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStats) EXPECT() *MockStatsMockRecorder {
	return m.recorder
}

// NewSampledTaggedStat mocks base method.
func (m *MockStats) NewSampledTaggedStat(name, statType string, tags Tags) Measurement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSampledTaggedStat", name, statType, tags)
	ret0, _ := ret[0].(Measurement)
	return ret0
}

// NewSampledTaggedStat indicates an expected call of NewSampledTaggedStat.
func (mr *MockStatsMockRecorder) NewSampledTaggedStat(name, statType, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSampledTaggedStat", reflect.TypeOf((*MockStats)(nil).NewSampledTaggedStat), name, statType, tags)
}

// NewStat mocks base method.
func (m *MockStats) NewStat(name, statType string) Measurement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStat", name, statType)
	ret0, _ := ret[0].(Measurement)
	return ret0
}

// NewStat indicates an expected call of NewStat.
func (mr *MockStatsMockRecorder) NewStat(name, statType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStat", reflect.TypeOf((*MockStats)(nil).NewStat), name, statType)
}

// NewTaggedStat mocks base method.
func (m *MockStats) NewTaggedStat(name, statType string, tags Tags) Measurement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTaggedStat", name, statType, tags)
	ret0, _ := ret[0].(Measurement)
	return ret0
}

// NewTaggedStat indicates an expected call of NewTaggedStat.
func (mr *MockStatsMockRecorder) NewTaggedStat(name, statType, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTaggedStat", reflect.TypeOf((*MockStats)(nil).NewTaggedStat), name, statType, tags)
}

// Start mocks base method.
func (m *MockStats) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockStatsMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStats)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockStats) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStatsMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStats)(nil).Stop))
}
